/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Deposit;
import io.swagger.model.DepositRequestBody;
import org.threeten.bp.LocalDate;
import io.swagger.model.Transaction;
import io.swagger.model.TransactionRequestBody;
import io.swagger.model.Withdrawal;
import io.swagger.model.WithdrawalRequestBody;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-05-17T11:49:32.019Z[GMT]")
@Validated
public interface TransactionsApi {

    @Operation(summary = "creates a deposit", description = "Creates a new deposit on the system.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "transactions", "customer", "employee" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Deposit succeeded.", content = @Content(schema = @Schema(implementation = Deposit.class))),
        
        @ApiResponse(responseCode = "400", description = "invalid input, object invalid"),
        
        @ApiResponse(responseCode = "401", description = "Bad Authentication."),
        
        @ApiResponse(responseCode = "409", description = "transaction limit surpassed.") })
    @RequestMapping(value = "/transactions/deposit",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Deposit> createDeposit(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody DepositRequestBody body);


    @Operation(summary = "creates a transaction", description = "Creates a new transaction", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "transactions", "customer", "employee" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Transaction succeded", content = @Content(schema = @Schema(implementation = Transaction.class))),
        
        @ApiResponse(responseCode = "400", description = "Transaction failed, invalid account"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized."),
        
        @ApiResponse(responseCode = "409", description = "Not enough funds in account; Transaction day limit has been reached; Transaction limit surpassed/") })
    @RequestMapping(value = "/transactions",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Transaction> createTransaction(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody TransactionRequestBody body);


    @Operation(summary = "creates a withdrawal", description = "Creates a new withdrawal on the system.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "transactions", "customer", "employee" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Whitdrawal succeeded.", content = @Content(schema = @Schema(implementation = Withdrawal.class))),
        
        @ApiResponse(responseCode = "400", description = "invalid input, object invalid"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized."),
        
        @ApiResponse(responseCode = "409", description = "Not enough funds in account or transaction limit surpassed.") })
    @RequestMapping(value = "/transactions/withdrawal",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Withdrawal> createWhitdrawal(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody WithdrawalRequestBody body);


    @Operation(summary = "gets list of transactions", description = "Shows all the transactions", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "transactions", "employee" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Transactions found and returned", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Transaction.class)))),
        
        @ApiResponse(responseCode = "400", description = "Invalid input."),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized."),
        
        @ApiResponse(responseCode = "404", description = "No transactions found.") })
    @RequestMapping(value = "/transactions",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Transaction>> getTransactions(@Parameter(in = ParameterIn.QUERY, description = "amount of transaction to skip" ,schema=@Schema()) @Valid @RequestParam(value = "offset", required = false) Long offset, @Parameter(in = ParameterIn.QUERY, description = "limit of transactions to get" ,schema=@Schema( defaultValue="50")) @Valid @RequestParam(value = "limit", required = false, defaultValue="50") Long limit, @Parameter(in = ParameterIn.QUERY, description = "Get all transactions from this date" ,schema=@Schema()) @Valid @RequestParam(value = "dateFrom", required = false) LocalDate dateFrom, @Parameter(in = ParameterIn.QUERY, description = "Get all transactions to this date" ,schema=@Schema()) @Valid @RequestParam(value = "dateTo", required = false) LocalDate dateTo);


    @Operation(summary = "gets list of transactions by iban", description = "Shows all the transactions from one iban", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "transactions", "customer", "employee" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Transactions found and returned", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Transaction.class)))),
        
        @ApiResponse(responseCode = "400", description = "Invalid input."),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized."),
        
        @ApiResponse(responseCode = "404", description = "No transactions found.") })
    @RequestMapping(value = "/transactions/{iban}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Transaction>> getTransactionsByIban(@Parameter(in = ParameterIn.PATH, description = "Iban from the transactions you want to see", required=true, schema=@Schema()) @PathVariable("iban") String iban, @Parameter(in = ParameterIn.QUERY, description = "amount of transaction to skip" ,schema=@Schema()) @Valid @RequestParam(value = "offset", required = false) Long offset, @Parameter(in = ParameterIn.QUERY, description = "limit of transactions to get" ,schema=@Schema( defaultValue="50")) @Valid @RequestParam(value = "limit", required = false, defaultValue="50") Long limit, @Parameter(in = ParameterIn.QUERY, description = "Get all transactions from this date" ,schema=@Schema()) @Valid @RequestParam(value = "dateFrom", required = false) LocalDate dateFrom, @Parameter(in = ParameterIn.QUERY, description = "Get all transactions to this date" ,schema=@Schema()) @Valid @RequestParam(value = "dateTo", required = false) LocalDate dateTo);

}

